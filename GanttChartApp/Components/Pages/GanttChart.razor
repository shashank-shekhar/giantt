@page "/"
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using System.ComponentModel.DataAnnotations
@using Microsoft.JSInterop
@rendermode InteractiveServer

<PageTitle>Gantt Chart</PageTitle>

<h1>Gantt Chart Manager</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CreateNewChart">Create New Chart</button>
    <button class="btn btn-secondary" @onclick="SaveChart">Save Chart</button>
    <button class="btn btn-info" @onclick="LoadChart">Load Chart</button>
</div>

<div class="mb-3">
    <label for="chartName" class="form-label">Chart Name:</label>
    <input type="text" class="form-control" id="chartName" @bind="ChartName" />
</div>





<SfGantt @ref="GanttRef"
         TValue="TaskData"
         DataSource="@TaskCollection" 
         Height="600px" 
         Width="100%"
         @bind-SelectedRowIndex="SelectedRowIndex"
         AllowSelection="true"
         AllowSorting="true"
         AllowReordering="true"
         AllowResizing="true"
         ShowColumnMenu="true"
         AllowFiltering="true"
         AllowPdfExport="true"
         AllowExcelExport="true"
         Toolbar="@ToolbarItems"
         ProjectStartDate="@ProjectStart"
         ProjectEndDate="@ProjectEnd">
    <GanttTaskFields Id="TaskId" 
                     Name="TaskName" 
                     StartDate="StartDate" 
                     EndDate="EndDate" 
                     Duration="Duration" 
                     Progress="Progress" 
                     ParentID="ParentId">
    </GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="TaskId" HeaderText="ID" Width="80"></GanttColumn>
        <GanttColumn Field="TaskName" HeaderText="Task Name" Width="250"></GanttColumn>
        <GanttColumn Field="StartDate" HeaderText="Start Date" Width="150"></GanttColumn>
        <GanttColumn Field="EndDate" HeaderText="End Date" Width="150"></GanttColumn>
        <GanttColumn Field="Duration" HeaderText="Duration" Width="100"></GanttColumn>
        <GanttColumn Field="Progress" HeaderText="Progress" Width="100"></GanttColumn>
    </GanttColumns>
    <GanttEditSettings AllowAdding="true" 
                       AllowEditing="true" 
                       AllowDeleting="true" 
                       AllowTaskbarEditing="true"
                       ShowDeleteConfirmDialog="true">
    </GanttEditSettings>
    <GanttEvents TValue="TaskData" 
                 OnActionComplete="ActionCompleteHandler"
                 OnToolbarClick="ToolbarClickHandler">
    </GanttEvents>
</SfGantt>

@code {
    private SfGantt<TaskData> GanttRef = default!;
    private List<TaskData> TaskCollection = new();
    private string ChartName = "My Gantt Chart";
    private int SelectedRowIndex = -1;
    private DateTime ProjectStart = DateTime.Today;
    private DateTime ProjectEnd = DateTime.Today.AddDays(30);

    // Toolbar configuration with all standard buttons
    private List<string> ToolbarItems = new List<string>()
    {
        "Add", "Edit", "Delete", "Update", "Cancel", "Search",
        "ExpandAll", "CollapseAll", "ZoomIn", "ZoomOut", "ZoomToFit",
        "PrevTimeSpan", "NextTimeSpan", "ExcelExport", "CsvExport", "PdfExport"
    };

    protected override void OnInitialized()
    {
        LoadDefaultTasks();
    }

    private void LoadDefaultTasks()
    {
        // Start with an empty task collection
        TaskCollection = new List<TaskData>();
    }

    private void CreateNewChart()
    {
        TaskCollection.Clear();
        ChartName = "New Gantt Chart";
        StateHasChanged();
    }



    private async Task SaveChart()
    {
        try
        {
            var chartId = Guid.NewGuid().ToString();
            var chartData = new GanttChartData
            {
                Id = chartId,
                Name = ChartName,
                Tasks = TaskCollection,
                CreatedDate = DateTime.Now,
                ProjectStart = ProjectStart,
                ProjectEnd = ProjectEnd
            };

            var json = System.Text.Json.JsonSerializer.Serialize(chartData);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"gantt_chart_{chartId}", json);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "gantt_chart_current", chartId);
            
            await JSRuntime.InvokeVoidAsync("alert", $"Chart saved successfully! Chart ID: {chartId}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving chart: {ex.Message}");
        }
    }

    private async Task LoadChart()
    {
        try
        {
            var currentChartId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "gantt_chart_current");
            if (!string.IsNullOrEmpty(currentChartId))
            {
                var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", $"gantt_chart_{currentChartId}");
                if (!string.IsNullOrEmpty(json))
                {
                    var chartData = System.Text.Json.JsonSerializer.Deserialize<GanttChartData>(json);
                    if (chartData != null)
                    {
                        ChartName = chartData.Name;
                        TaskCollection = chartData.Tasks ?? new List<TaskData>();
                        ProjectStart = chartData.ProjectStart;
                        ProjectEnd = chartData.ProjectEnd;
                        StateHasChanged();
                        await JSRuntime.InvokeVoidAsync("alert", "Chart loaded successfully!");
                        return;
                    }
                }
            }
            await JSRuntime.InvokeVoidAsync("alert", "No saved chart found!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading chart: {ex.Message}");
        }
    }

    private void ActionCompleteHandler(GanttActionEventArgs<TaskData> args)
    {
        // Sync TaskCollection with the actual data in the Gantt chart
        if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Add && args.Data != null)
        {
            // Task was added
            var newTask = args.Data as TaskData;
            if (newTask != null && !TaskCollection.Any(t => t.TaskId == newTask.TaskId))
            {
                TaskCollection.Add(newTask);
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Save && args.Data != null)
        {
            // Task was edited/updated
            var editedTask = args.Data as TaskData;
            if (editedTask != null)
            {
                var existingTask = TaskCollection.FirstOrDefault(t => t.TaskId == editedTask.TaskId);
                if (existingTask != null)
                {
                    // Update the existing task with new values
                    existingTask.TaskName = editedTask.TaskName;
                    existingTask.StartDate = editedTask.StartDate;
                    existingTask.EndDate = editedTask.EndDate;
                    existingTask.Duration = editedTask.Duration;
                    existingTask.Progress = editedTask.Progress;
                    existingTask.ParentId = editedTask.ParentId;
                }
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Delete && args.Data != null)
        {
            // Task was deleted
            var deletedTask = args.Data as TaskData;
            if (deletedTask != null)
            {
                TaskCollection.RemoveAll(t => t.TaskId == deletedTask.TaskId);
            }
        }
        
        StateHasChanged();
    }

    // Toolbar click handler
    private async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        try
        {
            var itemId = args.Item.Id;
            
            // Handle export actions
            if (itemId.Contains("excelexport"))
            {
                await GanttRef.ExportToExcelAsync();
            }
            else if (itemId.Contains("csvexport"))
            {
                await GanttRef.ExportToCsvAsync();
            }
            else if (itemId.Contains("pdfexport"))
            {
                await GanttRef.ExportToPdfAsync();
            }
            // Most toolbar actions (zoom, expand/collapse, etc.) are handled automatically by Syncfusion
            // The toolbar items will trigger their respective built-in functionality
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error handling toolbar action: {ex.Message}");
        }
    }



    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
}
