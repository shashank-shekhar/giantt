@page "/"
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using System.ComponentModel.DataAnnotations
@using System.Web
@using Microsoft.JSInterop
@rendermode InteractiveServer

<PageTitle>Gantt Chart</PageTitle>

<h1>Gantt Chart Manager</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CreateNewChart">Create New Chart</button>
    <button class="btn btn-secondary" @onclick="SaveChart">Save Chart</button>
    <button class="btn btn-info" @onclick="LoadChart">Load Chart</button>
    <button class="btn btn-success" @onclick="ShareChart">Share Chart</button>
</div>

<div class="mb-3">
    <label for="chartName" class="form-label">Chart Name:</label>
    <input type="text" class="form-control" id="chartName" @bind="ChartName" />
</div>





<SfGantt @ref="GanttRef"
         TValue="TaskData"
         DataSource="@TaskCollection" 
         Height="600px" 
         Width="100%"
         @bind-SelectedRowIndex="SelectedRowIndex"
         AllowSelection="true"
         AllowSorting="true"
         AllowReordering="true"
         AllowResizing="true"
         ShowColumnMenu="true"
         AllowFiltering="true"
         AllowPdfExport="true"
         AllowExcelExport="true"
         Toolbar="@ToolbarItems"
         ProjectStartDate="@ProjectStart"
         ProjectEndDate="@ProjectEnd">
    <GanttTaskFields Id="TaskId" 
                     Name="TaskName" 
                     StartDate="StartDate" 
                     EndDate="EndDate" 
                     Duration="Duration" 
                     Progress="Progress" 
                     ParentID="ParentId">
    </GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="TaskId" HeaderText="ID" Width="80"></GanttColumn>
        <GanttColumn Field="TaskName" HeaderText="Task Name" Width="250"></GanttColumn>
        <GanttColumn Field="StartDate" HeaderText="Start Date" Width="150"></GanttColumn>
        <GanttColumn Field="EndDate" HeaderText="End Date" Width="150"></GanttColumn>
        <GanttColumn Field="Duration" HeaderText="Duration" Width="100"></GanttColumn>
        <GanttColumn Field="Progress" HeaderText="Progress" Width="100"></GanttColumn>
    </GanttColumns>
    <GanttEditSettings AllowAdding="true" 
                       AllowEditing="true" 
                       AllowDeleting="true" 
                       AllowTaskbarEditing="true"
                       ShowDeleteConfirmDialog="true">
    </GanttEditSettings>
    <GanttEvents TValue="TaskData" 
                 OnActionComplete="ActionCompleteHandler"
                 OnToolbarClick="ToolbarClickHandler">
    </GanttEvents>
</SfGantt>

<!-- Save Dialog -->
<SfDialog @ref="SaveDialogRef" Width="400px" Height="300px" IsModal="true" Visible="false" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>Save Gantt Chart</Header>
        <Content>
            <div class="form-group mb-3">
                <label for="saveChartName" class="form-label">Chart Name:</label>
                <SfTextBox @bind-Value="SaveChartName" ID="saveChartName" Placeholder="Enter chart name" CssClass="form-control"></SfTextBox>
            </div>
            <div class="form-group mb-3">
                <label for="saveDescription" class="form-label">Description (Optional):</label>
                <SfTextBox @bind-Value="SaveDescription" ID="saveDescription" Placeholder="Enter description" CssClass="form-control" Multiline="true"></SfTextBox>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Save" IsPrimary="true" OnClick="@SaveChartConfirm" />
        <DialogButton Content="Cancel" OnClick="@CloseSaveDialog" />
    </DialogButtons>
</SfDialog>

<!-- Load Dialog -->
<SfDialog @ref="LoadDialogRef" Width="500px" Height="400px" IsModal="true" Visible="false" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>Load Gantt Chart</Header>
        <Content>
            <div class="mb-3">
                <label class="form-label">Select a chart to load:</label>
            </div>
            @if (SavedCharts.Any())
            {
                <div class="list-group" style="max-height: 250px; overflow-y: auto;">
                    @foreach (var chart in SavedCharts)
                    {
                        <div class="list-group-item @(SelectedChartId == chart.Id ? "active" : "")" 
                             @onclick="() => SelectChart(chart.Id)" 
                             style="cursor: pointer;">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">@chart.Name</h6>
                                <small>@chart.CreatedDate.ToString("MM/dd/yyyy HH:mm")</small>
                            </div>
                            @if (!string.IsNullOrEmpty(chart.Description))
                            {
                                <p class="mb-1">@chart.Description</p>
                            }
                            <small>Tasks: @chart.Tasks.Count</small>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> No saved charts found.
                </div>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Load" IsPrimary="true" OnClick="@LoadChartConfirm" Disabled="@(string.IsNullOrEmpty(SelectedChartId))" />
        <DialogButton Content="Delete" CssClass="btn-danger" OnClick="@DeleteChartConfirm" Disabled="@(string.IsNullOrEmpty(SelectedChartId))" />
        <DialogButton Content="Cancel" OnClick="@CloseLoadDialog" />
    </DialogButtons>
</SfDialog>

<!-- Share Dialog -->
<SfDialog @ref="ShareDialogRef" Width="500px" Height="350px" IsModal="true" Visible="false" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>Share Gantt Chart</Header>
        <Content>
            <div class="mb-3">
                <label class="form-label">Share URL:</label>
                <div class="input-group">
                    <SfTextBox @bind-Value="ShareUrl" ID="shareUrl" Readonly="true" CssClass="form-control"></SfTextBox>
                    <button class="btn btn-outline-secondary" type="button" @onclick="CopyShareUrl">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                </div>
            </div>
            <div class="mb-3">
                <small class="text-muted">
                    <i class="fas fa-info-circle"></i> 
                    This URL contains your chart data and can be shared with others. 
                    Anyone with this link can view and edit the chart.
                </small>
            </div>
            <div class="mb-3">
                <label class="form-label">Chart Preview:</label>
                <div class="card">
                    <div class="card-body">
                        <h6 class="card-title">@ChartName</h6>
                        <p class="card-text">
                            <small class="text-muted">Tasks: @TaskCollection.Count</small><br>
                            <small class="text-muted">Created: @DateTime.Now.ToString("MM/dd/yyyy HH:mm")</small>
                        </p>
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Open in New Tab" OnClick="@OpenShareUrlInNewTab" />
        <DialogButton Content="Close" OnClick="@CloseShareDialog" />
    </DialogButtons>
</SfDialog>

@code {
    private SfGantt<TaskData> GanttRef = default!;
    private SfDialog SaveDialogRef = default!;
    private SfDialog LoadDialogRef = default!;
    private SfDialog ShareDialogRef = default!;
    private List<TaskData> TaskCollection = new();
    private string ChartName = "My Gantt Chart";
    private int SelectedRowIndex = -1;
    private DateTime ProjectStart = DateTime.Today;
    private DateTime ProjectEnd = DateTime.Today.AddDays(30);

    // Dialog-related variables
    private string SaveChartName = "";
    private string SaveDescription = "";
    private string SelectedChartId = "";
    private string ShareUrl = "";
    private List<GanttChartData> SavedCharts = new();

    // Toolbar configuration with all standard buttons including custom PDF export
    private List<object> ToolbarItems = new List<object>()
    {
        new Syncfusion.Blazor.Navigations.ToolbarItem() { Text = "PDF Export", TooltipText = "PDF Export", Id = "PdfExport", PrefixIcon = "e-pdfexport" },
        "Add",
        "Edit",
         "Delete", "Update", "Cancel", "Search",
        "ExpandAll", "CollapseAll",
        "ExcelExport", "CsvExport", 
        "ZoomIn", "ZoomOut", "ZoomToFit",
        "PrevTimeSpan", "NextTimeSpan", 
    };

    protected override async Task OnInitializedAsync()
    {
        LoadDefaultTasks();
        await LoadSharedChartFromUrl();
    }

    private void LoadDefaultTasks()
    {
        // Temporarily add sample tasks for PDF export testing
        TaskCollection = new List<TaskData>
        {
            new TaskData { TaskId = 1, TaskName = "Project Planning", StartDate = DateTime.Today, EndDate = DateTime.Today.AddDays(5), Duration = "5 days", Progress = 30 },
            new TaskData { TaskId = 2, TaskName = "Design Phase", StartDate = DateTime.Today.AddDays(6), EndDate = DateTime.Today.AddDays(15), Duration = "10 days", Progress = 60 },
            new TaskData { TaskId = 3, TaskName = "Development", StartDate = DateTime.Today.AddDays(16), EndDate = DateTime.Today.AddDays(30), Duration = "15 days", Progress = 20 },
            new TaskData { TaskId = 4, TaskName = "Testing", StartDate = DateTime.Today.AddDays(31), EndDate = DateTime.Today.AddDays(40), Duration = "10 days", Progress = 0 },
            new TaskData { TaskId = 5, TaskName = "Deployment", StartDate = DateTime.Today.AddDays(41), EndDate = DateTime.Today.AddDays(45), Duration = "5 days", Progress = 0 }
        };
    }

    private void CreateNewChart()
    {
        TaskCollection.Clear();
        ChartName = "New Gantt Chart";
        StateHasChanged();
    }



    private async Task SaveChart()
    {
        SaveChartName = ChartName;
        SaveDescription = "";
        await SaveDialogRef.ShowAsync();
    }

    private async Task LoadChart()
    {
        await LoadSavedCharts();
        SelectedChartId = "";
        await LoadDialogRef.ShowAsync();
    }

    private void ActionCompleteHandler(GanttActionEventArgs<TaskData> args)
    {
        // Sync TaskCollection with the actual data in the Gantt chart
        if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Add && args.Data != null)
        {
            // Task was added
            var newTask = args.Data as TaskData;
            if (newTask != null && !TaskCollection.Any(t => t.TaskId == newTask.TaskId))
            {
                TaskCollection.Add(newTask);
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Save && args.Data != null)
        {
            // Task was edited/updated
            var editedTask = args.Data as TaskData;
            if (editedTask != null)
            {
                var existingTask = TaskCollection.FirstOrDefault(t => t.TaskId == editedTask.TaskId);
                if (existingTask != null)
                {
                    // Update the existing task with new values
                    existingTask.TaskName = editedTask.TaskName;
                    existingTask.StartDate = editedTask.StartDate;
                    existingTask.EndDate = editedTask.EndDate;
                    existingTask.Duration = editedTask.Duration;
                    existingTask.Progress = editedTask.Progress;
                    existingTask.ParentId = editedTask.ParentId;
                }
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Delete && args.Data != null)
        {
            // Task was deleted
            var deletedTask = args.Data as TaskData;
            if (deletedTask != null)
            {
                TaskCollection.RemoveAll(t => t.TaskId == deletedTask.TaskId);
            }
        }
        
        StateHasChanged();
    }

    // Toolbar click handler
    private async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        try
        {
            var itemId = args.Item.Id;
            // console log itemId
            Console.WriteLine(itemId);
            // Handle export actions
            if (itemId.Contains("excelexport"))
            {
                await GanttRef.ExportToExcelAsync();
            }
            else if (itemId.Contains("csvexport"))
            {
                await GanttRef.ExportToCsvAsync();
            }
            else if (itemId.Contains("PdfExport"))
            {
                await GanttRef.ExportToPdfAsync();
            }
            // Most toolbar actions (zoom, expand/collapse, etc.) are handled automatically by Syncfusion
            // The toolbar items will trigger their respective built-in functionality
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error handling toolbar action: {ex.Message}");
        }
    }

    // Dialog-related methods
    private async Task SaveChartConfirm()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SaveChartName))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please enter a chart name.");
                return;
            }

            var chartId = Guid.NewGuid().ToString();
            var chartData = new GanttChartData
            {
                Id = chartId,
                Name = SaveChartName.Trim(),
                Description = SaveDescription?.Trim() ?? "",
                Tasks = TaskCollection,
                CreatedDate = DateTime.Now,
                ProjectStart = ProjectStart,
                ProjectEnd = ProjectEnd
            };

            var json = System.Text.Json.JsonSerializer.Serialize(chartData);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"gantt_chart_{chartId}", json);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "gantt_chart_current", chartId);
            
            ChartName = SaveChartName.Trim();
            await SaveDialogRef.HideAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Chart saved successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving chart: {ex.Message}");
        }
    }

    private async Task CloseSaveDialog()
    {
        await SaveDialogRef.HideAsync();
    }

    private async Task LoadSavedCharts()
    {
        try
        {
            SavedCharts.Clear();
            var keys = await JSRuntime.InvokeAsync<string[]>("eval", "Object.keys(localStorage).filter(key => key.startsWith('gantt_chart_') && key !== 'gantt_chart_current')");
            
            foreach (var key in keys)
            {
                var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
                if (!string.IsNullOrEmpty(json))
                {
                    try
                    {
                        var chartData = System.Text.Json.JsonSerializer.Deserialize<GanttChartData>(json);
                        if (chartData != null)
                        {
                            SavedCharts.Add(chartData);
                        }
                    }
                    catch
                    {
                        // Skip invalid chart data
                    }
                }
            }
            
            SavedCharts = SavedCharts.OrderByDescending(c => c.CreatedDate).ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading saved charts: {ex.Message}");
        }
    }

    private void SelectChart(string chartId)
    {
        SelectedChartId = chartId;
        StateHasChanged();
    }

    private async Task LoadChartConfirm()
    {
        try
        {
            if (string.IsNullOrEmpty(SelectedChartId))
            {
                return;
            }

            var selectedChart = SavedCharts.FirstOrDefault(c => c.Id == SelectedChartId);
            if (selectedChart != null)
            {
                ChartName = selectedChart.Name;
                TaskCollection = selectedChart.Tasks ?? new List<TaskData>();
                ProjectStart = selectedChart.ProjectStart;
                ProjectEnd = selectedChart.ProjectEnd;
                
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "gantt_chart_current", SelectedChartId);
                await LoadDialogRef.HideAsync();
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "Chart loaded successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading chart: {ex.Message}");
        }
    }

    private async Task DeleteChartConfirm()
    {
        try
        {
            if (string.IsNullOrEmpty(SelectedChartId))
            {
                return;
            }

            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this chart?");
            if (confirmed)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", $"gantt_chart_{SelectedChartId}");
                await LoadSavedCharts();
                SelectedChartId = "";
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "Chart deleted successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting chart: {ex.Message}");
        }
    }

    private async Task CloseLoadDialog()
    {
        await LoadDialogRef.HideAsync();
    }

    // Share-related methods
    private async Task ShareChart()
    {
        try
        {
            var chartData = new GanttChartData
            {
                Id = Guid.NewGuid().ToString(),
                Name = ChartName,
                Description = $"Shared chart with {TaskCollection.Count} tasks",
                Tasks = TaskCollection,
                CreatedDate = DateTime.Now,
                ProjectStart = ProjectStart,
                ProjectEnd = ProjectEnd
            };

            var json = System.Text.Json.JsonSerializer.Serialize(chartData);
            var base64Data = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));
            
            var baseUrl = Navigation.BaseUri.TrimEnd('/');
            ShareUrl = $"{baseUrl}?data={base64Data}";
            
            await ShareDialogRef.ShowAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating share URL: {ex.Message}");
        }
    }

    private async Task LoadSharedChartFromUrl()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var dataParam = query["data"];
            
            if (!string.IsNullOrEmpty(dataParam))
            {
                var jsonBytes = Convert.FromBase64String(dataParam);
                var json = System.Text.Encoding.UTF8.GetString(jsonBytes);
                var chartData = System.Text.Json.JsonSerializer.Deserialize<GanttChartData>(json);
                
                if (chartData != null)
                {
                    ChartName = chartData.Name;
                    TaskCollection = chartData.Tasks ?? new List<TaskData>();
                    ProjectStart = chartData.ProjectStart;
                    ProjectEnd = chartData.ProjectEnd;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            // Silently ignore errors when loading shared charts
            // This allows the app to work normally even with invalid share URLs
        }
    }

    private async Task CopyShareUrl()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", ShareUrl);
            await JSRuntime.InvokeVoidAsync("alert", "Share URL copied to clipboard!");
        }
        catch (Exception)
        {
            // Fallback for browsers that don't support clipboard API
            await JSRuntime.InvokeVoidAsync("prompt", "Copy this URL:", ShareUrl);
        }
    }

    private async Task OpenShareUrlInNewTab()
    {
        await JSRuntime.InvokeVoidAsync("window.open", ShareUrl, "_blank");
    }

    private async Task CloseShareDialog()
    {
        await ShareDialogRef.HideAsync();
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
    
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
}
